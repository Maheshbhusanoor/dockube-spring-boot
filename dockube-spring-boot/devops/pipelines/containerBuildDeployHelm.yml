name: container-deploy-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include:
      - develop
  paths:
    exclude:
      - devops/*
    include:
      - /*
      - devops/helm/*

resources:
  repositories:
    - repository: variable-templates
      type: git
      name: ACP/devops-configuration
      ref: enterprise-dev
    - repository: solution-pipelines
      type: git
      name: ACP/solution-pipelines
      ref: enterprise-dev

parameters:
# the pipeline type selector
- name: typeOfRun
  displayName: 'Select the type of run'
  type: string
  default: 'Regular'
  values:
  - 'Regular'
  - 'Deploy the selected image'
  - 'Hotfix Build & Deploy (UAT-PRD)'
  - 'Experimental environment (DevOps team only)'

## parameters for Deploy the selected image type
- name: selectedImageTag
  displayName: 'Specify container image tag (selected image only)'
  type: string
  default: latest

- name: selectedDeploymentEnv
  displayName: 'Select environment to deploy (selected image only)'
  type: string
  default: dev
  values:
  - exp
  - dev
  - qa
  - uat
  - prd
## end of parameters for Deploy the selected image

variables:
# conditions:
- name: experimentalBuild
  value: ${{ eq(parameters.typeOfRun, 'Experimental environment (DevOps team only)') }}
- name: selectedImageDeploy
  value: ${{ eq(parameters.typeOfRun, 'Deploy the selected image') }}
- name: hotfixBuild
  value: ${{ eq(parameters.typeOfRun, 'Hotfix Build & Deploy (UAT-PRD)') }}
# variables based on current condition
- ${{ if eq(parameters.typeOfRun, 'Hotfix Build & Deploy (UAT-PRD)') }}:
  - name: buildEnv
    value: uat
  - name: reason
    value: Hotfix
- ${{ else }}:
  - name: buildEnv
    value: dev
  - name: reason
    value: Release
# external variables
- template: variables/containerBuildDeployHelm/global-vars.yml@self
- template: global/global.yml@variable-templates
- template: global/app-global.yml@variable-templates

pool:
  vmImage: $(vmImageUbuntu)

stages:
# stage for generating properly build name and freezing current datetime for tags
- stage: PreBuild
  displayName: 'Prebuild stage'
  # protection from the rerun. will skip entire pipeline if restart
  condition: eq(variables['SYSTEM.STAGEATTEMPT'], '1')
  jobs:
  - job: PreBuildJob
    displayName: 'Generate build name & tags'
    steps:
    - checkout: none

    - template: application/steps/preBuildBE-task.yml@solution-pipelines
      parameters:
        ${{ if eq(variables.experimentalBuild, true) }}:
          deploymentType: experimentalBuild
        ${{ elseif eq(variables.hotfixBuild, true) }}:
          deploymentType: hotfixBuild
        ${{ elseif eq(variables.selectedImageDeploy, true) }}:
          deploymentType: selectedImageDeploy
          environment: ${{ parameters.selectedDeploymentEnv }}
          imageTag: ${{ parameters.selectedImageTag }}
        ${{ else }}:
          deploymentType: regularBuild

# Experimental
# contains build and deploy within the one stage
- ${{ if eq(variables.experimentalBuild, true) }}:
  - stage: BuildExp
    displayName: 'Build Exp'
    dependsOn: PreBuild
    # protection from the rerun. will skip entire pipeline if restart
    condition: eq(variables['SYSTEM.STAGEATTEMPT'], '1')
    variables:
    # variable for tagging from the prebuild stage
    - name: buildDate
      value: $[ stageDependencies.PreBuild.PreBuildJob.outputs['Date.buildDate'] ]
    # container tag pattern
    - name: containerTag
      value: $(Build.BuildId)-$(reason)-$(gitTagExp)-$(buildDate)
    # external variables
    - template: application/exp/exp.yml@variable-templates
    - template: iac/exp/exp-bsl.yml@variable-templates
    - template: variables/containerBuildDeployHelm/build-vars.yml@self
    jobs:
    - job: Build
      displayName: 'Build Container - Experimental'
      steps:
      - checkout: self
        persistCredentials: true

      - template: common/steps/dockerGenTag-task.yml@solution-pipelines

      - template: application/steps/mavenAuth-task.yml@solution-pipelines
        parameters:
          artifactsFeeds: $(artifactsRepoName)

      - template: common/steps/copyFiles-task.yml@solution-pipelines
        parameters:
          sourceFolder: $(HOME)/.m2
          sourceFiles: settings.xml
          targetFolder: $(Build.Repository.LocalPath)/devops

      - template: common/steps/docker-task.yml@solution-pipelines
        parameters:
          repository: $(containerRepository)
          containerRegistry: '$(acrServiceConnectionExp)'
          tags: $(containerTag)
    
      - template: common/steps/helm/helm-install.yml@solution-pipelines
        parameters:
          HelmVersion: $(HelmVersion)

      - template: common/steps/helm/helm-upgrade.yml@solution-pipelines
        parameters:
          ServiceConnection: $(ecomServiceConnectionExp)
          ResourceGroupName: $(resourceGroupIac)
          AksClusterName: $(clusterName)
          ValueFile: $(ValueFile)
          ReleaseName: $(ReleaseName)
          ChartPath: $(ChartPath)
          Tag: $(containerTag)

# Selected image deploy
- ${{ elseif eq(variables.selectedImageDeploy, true) }}:
  - stage: CustomImageDeployment
    displayName: '[${{ parameters.selectedDeploymentEnv }}] Deploy image with tag ${{ parameters.selectedImageTag }}'
    variables:
    # external variables with environment tag for properly selection of needed vars. envtag = selectedDeploymentEnv parameter value
    - template: application/${{ parameters.selectedDeploymentEnv }}/${{ parameters.selectedDeploymentEnv }}.yml@variable-templates
    - template: iac/${{ parameters.selectedDeploymentEnv }}/${{ parameters.selectedDeploymentEnv }}-bsl.yml@variable-templates
    jobs:
    - deployment: CustomImageDeployment
      displayName: 'Deploy ${{ variables.ReleaseName }}:${{ parameters.selectedImageTag }}'
      ${{ if in(parameters.selectedDeploymentEnv, 'exp', 'dev') }}:
        environment: ${{ parameters.selectedDeploymentEnv }}
      ${{ else }}:
        environment: ${{ variables.artifactName }}-${{ parameters.selectedDeploymentEnv }}
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              persistCredentials: true
            
            - template: common/steps/helm/helm-install.yml@solution-pipelines
              parameters:
                HelmVersion: $(HelmVersion)

            - template: common/steps/helm/helm-upgrade.yml@solution-pipelines
              parameters:
                ServiceConnection: dighub-ecoms-${{ parameters.selectedDeploymentEnv }}-sc-arm
                ResourceGroupName: $(resourceGroupIac)
                AksClusterName: $(clusterName)
                ValueFile: $(ValueFile)
                ReleaseName: $(ReleaseName)
                ChartPath: $(ChartPath)
                Tag: ${{ parameters.selectedImageTag }}

# if 'Regular' type selected pipeline will pass full process with Build and Deploy DEV-QA-UAT-PRD
# if 'Hotfix Build & Deploy (UAT-PRD)' type selected pipeline will pass process with Build and Deploy UAT-PRD
- ${{ else }}:
  - stage: Build
    displayName: 'Build'
    dependsOn:
    - PreBuild
    variables:
    # variable for tagging from the prebuild stage
    - name: buildDate
      value: $[ stageDependencies.PreBuild.PreBuildJob.outputs['Date.buildDate'] ]
    # container tag pattern
    - name: containerTag
      value: $(Build.BuildId)-$(reason)-${{ variables.buildEnv }}-$(buildDate)
    # external variables with environment tag for properly selection of needed vars
    # if 'Regular' = dev, if 'Hotfix Build & Deploy (UAT-PRD)' = uat
    - template: application/${{ variables.buildEnv }}/${{ variables.buildEnv }}.yml@variable-templates
    - template: iac/${{ variables.buildEnv }}/${{ variables.buildEnv }}-bsl.yml@variable-templates
    - template: variables/containerBuildDeployHelm/build-vars.yml@self
    # protection from the rerun. will skip entire pipeline if restart
    condition: eq(variables['SYSTEM.STAGEATTEMPT'], '1')
    jobs:
    - job: Build
      displayName: 'Build Container - ${{ upper(variables.buildEnv) }}'
      steps:
      - checkout: self
      
      - template: application/steps/mavenAuth-task.yml@solution-pipelines
        parameters:
          artifactsFeeds: $(artifactsRepoName)

      - template: common/steps/copyFiles-task.yml@solution-pipelines
        parameters:
          sourceFolder: $(HOME)/.m2
          sourceFiles: settings.xml
          targetFolder: $(Build.Repository.LocalPath)/devops

      - template: common/steps/docker-task.yml@solution-pipelines
        parameters:
          repository: $(containerRepository)
          containerRegistry: ${{ variables.buildEnv }}-acr
          tags: $(containerTag)
    
  - stage: Deploy
    displayName: 'Deploy ${{ upper(variables.buildEnv) }}'
    dependsOn: 
    - Build
    - PreBuild
    variables:
    # variable for tagging from the prebuild stage
    - name: buildDate
      value: $[ stageDependencies.PreBuild.PreBuildJob.outputs['Date.buildDate'] ]
    # container tag pattern
    - name: containerTag
      value: $(Build.BuildId)-$(reason)-${{ variables.buildEnv }}-$(buildDate)
    
    - template: application/${{ variables.buildEnv }}/${{ variables.buildEnv }}.yml@variable-templates
    - template: iac/${{ variables.buildEnv }}/${{ variables.buildEnv }}-bsl.yml@variable-templates
    jobs:
    - deployment: Deploy
      displayName: 'Deploy ${{ upper(variables.buildEnv) }}'
      # change the environment 
      ${{ if eq(variables.hotfixBuild, true) }}:
        environment: ${{ variables.artifactName }}-${{ variables.buildEnv }}
      ${{ else }}:
        environment: ${{ variables.buildEnv }}
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              persistCredentials: true
            
            - template: common/steps/helm/helm-install.yml@solution-pipelines
              parameters:
                HelmVersion: $(HelmVersion)

            - template: common/steps/helm/helm-upgrade.yml@solution-pipelines
              parameters:
                ServiceConnection: dighub-ecoms-${{ variables.buildEnv }}-sc-arm
                ResourceGroupName: $(resourceGroupIac)
                AksClusterName: $(clusterName)
                ValueFile: $(ValueFile)
                ReleaseName: $(ReleaseName)
                ChartPath: $(ChartPath)
                Tag: $(containerTag)

            - ${{ if eq(variables.hotfixBuild, true) }}:
              - template: common/steps/gitTagRework-task.yml@solution-pipelines
                parameters:
                  environment: ${{ variables.buildEnv }}
                  date: $(buildDate)
                  reason: Hotfix

  - ${{ if eq(variables.hotfixBuild, false) }}:
    # QA
    - stage: DeployQA
      displayName: 'Deploy QA'
      variables:
      - template: application/qa/qa.yml@variable-templates
      - template: iac/qa/qa-bsl.yml@variable-templates
      dependsOn:
      - Deploy
      - PreBuild
      jobs:
      - deployment: deployment_qa
        variables:
        - name: originAcrUrl
          value: '${{ variables.acrNameDev }}.azurecr.io'
        - name: targetAcrUrl
          value: '${{ variables.acrNameQa }}.azurecr.io'
        # variable for tagging from the prebuild stage
        - name: buildDate
          value: $[ stageDependencies.PreBuild.PreBuildJob.outputs['Date.buildDate'] ]
        # container tag pattern
        - name: ImageTagDev
          value: $(Build.BuildId)-$(reason)-$(gitTagDev)-$(buildDate)
        - name: ImageTagQa
          value: $(Build.BuildId)-$(reason)-$(gitTagQa)-$(buildDate)
        displayName: 'Build for ${{ variables.qaEnvironment }}'
        environment: ${{ variables.qaEnvironment }}
        strategy:
          runOnce:
            deploy:
              steps:
              - checkout: self
                persistCredentials: true

              - template: application/steps/dockerRetagWithHelm-steps.yml@solution-pipelines
                parameters:
                  originTag: $(ImageTagDev)
                  targetTag: $(ImageTagQa)
                  originAcrUrl: $(originAcrUrl)
                  targetAcrUrl: $(targetAcrUrl)
                  sourceContainerRegistry: $(acrServiceConnectionDev)
                  destinationContainerRegistry: $(acrServiceConnectionQa)
                  sourceAcrName: $(acrNameDev)
                  imageName: $(containerRepository)
                  # helm
                  HelmVersion: $(HelmVersion)
                  ServiceConnection: $(ecomServiceConnectionQa)
                  ResourceGroupName: $(resourceGroupIac)
                  AksClusterName: $(clusterName)
                  ValueFile: $(ValueFile)
                  ReleaseName: $(ReleaseName)
                  ChartPath: $(ChartPath)
                  Tag: $(ImageTagQa)

              - template: common/steps/gitTagRework-task.yml@solution-pipelines
                parameters:
                  environment: $(gitTagQa)
                  date: $(buildDate)
    # UAT
    - stage: DeployUAT
      displayName: 'Deploy UAT'
      variables:
      - template: application/uat/uat.yml@variable-templates
      - template: iac/uat/uat-bsl.yml@variable-templates
      dependsOn:
      - DeployQA
      - PreBuild
      jobs:
      - deployment: deployment_uat
        variables:
        - name: originAcrUrl
          value: '${{ variables.acrNameQa }}.azurecr.io'
        - name: targetAcrUrl
          value: '${{ variables.acrNameUat }}.azurecr.io'
        # variable for tagging from the prebuild stage
        - name: buildDate
          value: $[ stageDependencies.PreBuild.PreBuildJob.outputs['Date.buildDate'] ]
        # container tag pattern
        - name: ImageTagQa
          value: $(Build.BuildId)-$(reason)-$(gitTagQa)-$(buildDate)
        - name: ImageTagUat
          value: $(Build.BuildId)-$(reason)-$(gitTagUAT)-$(buildDate)
        displayName: 'Build for ${{ variables.uatEnvironment }}'
        environment: ${{ variables.uatEnvironment }}
        strategy:
          runOnce:
            deploy:
              steps:
              - checkout: self
                persistCredentials: true

              - template: application/steps/dockerRetagWithHelm-steps.yml@solution-pipelines
                parameters:
                  originTag: $(ImageTagQa)
                  targetTag: $(ImageTagUat)
                  originAcrUrl: $(originAcrUrl)
                  targetAcrUrl: $(targetAcrUrl)
                  sourceContainerRegistry: $(acrServiceConnectionQa)
                  destinationContainerRegistry: $(acrServiceConnectionUat)
                  sourceAcrName: $(acrNameQa)
                  imageName: $(containerRepository)
                  # helm
                  HelmVersion: $(HelmVersion)
                  ServiceConnection: $(ecomServiceConnectionUat)
                  ResourceGroupName: $(resourceGroupIac)
                  AksClusterName: $(clusterName)
                  ValueFile: $(ValueFile)
                  ReleaseName: $(ReleaseName)
                  ChartPath: $(ChartPath)
                  Tag: $(ImageTagUat)             

              - template: common/steps/gitTagRework-task.yml@solution-pipelines
                parameters:
                  environment: $(gitTagUAT)
                  date: $(buildDate)     
#PROD
  - stage: DeployPrd
    displayName: 'Deploy Prd'
    variables:
    - template: application/prd/prd.yml@variable-templates
    - template: iac/prd/prd-bsl.yml@variable-templates
    dependsOn:
    - ${{ if eq(variables.hotfixBuild, true) }}:
      - Deploy
    - ${{ else }}:
      - DeployUAT
    - PreBuild
    jobs:
    - deployment: deployment_prd
      variables:
      - name: originAcrUrl
        value: '${{ variables.acrNameUat }}.azurecr.io'
      - name: targetAcrUrl
        value: '${{ variables.acrNamePrd }}.azurecr.io'
      # variable for tagging from the prebuild stage
      - name: buildDate
        value: $[ stageDependencies.PreBuild.PreBuildJob.outputs['Date.buildDate'] ]
      # container tag pattern
      - name: ImageTagUat
        value: $(Build.BuildId)-$(reason)-$(gitTagUAT)-$(buildDate)
      - name: ImageTagPrd
        value: $(Build.BuildId)-$(reason)-$(gitTagPRD)-$(buildDate)
      displayName: 'Build for ${{ variables.prdEnvironment }}'
      environment: ${{ variables.prdEnvironment }}
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
              persistCredentials: true

            - template: application/steps/dockerRetagWithHelm-steps.yml@solution-pipelines
              parameters:
                originTag: $(ImageTagUat)
                targetTag: $(ImageTagPrd)
                originAcrUrl: $(originAcrUrl)
                targetAcrUrl: $(targetAcrUrl)
                sourceContainerRegistry: $(acrServiceConnectionUat)
                destinationContainerRegistry: $(acrServiceConnectionPrd)
                sourceAcrName: $(acrNameUat)
                imageName: $(containerRepository)
                # helm
                HelmVersion: $(HelmVersion)
                ServiceConnection: $(ecomServiceConnectionPrd)
                ResourceGroupName: $(resourceGroupIac)
                AksClusterName: $(clusterName)
                ValueFile: $(ValueFile)
                ReleaseName: $(ReleaseName)
                ChartPath: $(ChartPath)
                Tag: $(ImageTagPrd)

            - template: common/steps/gitTagRework-task.yml@solution-pipelines
              parameters:
                environment: $(gitTagPRD)
                date: $(buildDate)
                ${{ if eq(variables.hotfixBuild, true) }}:
                  reason: Hotfix
